{"ast":null,"code":"/**\n * Regular expression for email\n * @type {RegExp}\n * @default\n */\nconst regexEmail = new RegExp(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/);\n/**\n * Regular expression for password\n * @type {RegExp}\n * @default\n */\n\nconst regexPassword = new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!*^?+-_@#$%&]{8,}$/);\n/**\n * Validate the login form data. This is useful for reduce traffic to backend\n * @param  {string} email\n * @param  {string} password\n * @return {Boolean}                - True means data is valid\n */\n\nconst validateLoginForm = (email, password) => {\n  let dataIsValid = true;\n\n  if (!email || !password) {\n    dataIsValid = false;\n  }\n\n  if (!regexEmail.test(email)) {\n    dataIsValid = false;\n  }\n\n  if (!regexPassword.test(password)) {\n    dataIsValid = false;\n  }\n\n  return dataIsValid;\n};\n/**\n * Validate the registration form data\n * @param  {string} email\n * @param  {string} password\n * @param  {string} repeatPassword\n * @return {Boolean}                - True means data is valid\n */\n\n\nconst validateRegisterForm = (email, password, repeatPassword) => {\n  let dataIsValid = true;\n\n  if (!email || !password || !repeatPassword) {\n    dataIsValid = false;\n  }\n\n  if (password !== repeatPassword) {\n    dataIsValid = false;\n  }\n\n  if (!regexEmail.test(email)) {\n    dataIsValid = false;\n  }\n\n  if (!regexPassword.test(password)) {\n    dataIsValid = false;\n  }\n\n  return dataIsValid;\n};\n\nmodule.exports = {\n  regexEmail,\n  regexPassword,\n  validateLoginForm,\n  validateRegisterForm\n};","map":{"version":3,"sources":["/Users/mattd/Desktop/boilerplate-frontend-react-graphql-apollo/src/utils/validations.js"],"names":["regexEmail","RegExp","regexPassword","validateLoginForm","email","password","dataIsValid","test","validateRegisterForm","repeatPassword","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAG,IAAIC,MAAJ,CAAW,yIAAX,CAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,IAAID,MAAJ,CAAW,6DAAX,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,iBAAiB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC9C,MAAIC,WAAW,GAAG,IAAlB;;AAEA,MAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB;AACxBC,IAAAA,WAAW,GAAG,KAAd;AACA;;AAED,MAAI,CAACN,UAAU,CAACO,IAAX,CAAgBH,KAAhB,CAAL,EAA6B;AAC5BE,IAAAA,WAAW,GAAG,KAAd;AACA;;AAED,MAAI,CAACJ,aAAa,CAACK,IAAd,CAAmBF,QAAnB,CAAL,EAAmC;AAClCC,IAAAA,WAAW,GAAG,KAAd;AACA;;AACD,SAAOA,WAAP;AACA,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,oBAAoB,GAAG,CAACJ,KAAD,EAAQC,QAAR,EAAkBI,cAAlB,KAAqC;AACjE,MAAIH,WAAW,GAAG,IAAlB;;AAEA,MAAI,CAACF,KAAD,IAAU,CAACC,QAAX,IAAuB,CAACI,cAA5B,EAA4C;AAC3CH,IAAAA,WAAW,GAAG,KAAd;AACA;;AAED,MAAID,QAAQ,KAAKI,cAAjB,EAAiC;AAChCH,IAAAA,WAAW,GAAG,KAAd;AACA;;AAED,MAAI,CAACN,UAAU,CAACO,IAAX,CAAgBH,KAAhB,CAAL,EAA6B;AAC5BE,IAAAA,WAAW,GAAG,KAAd;AACA;;AAED,MAAI,CAACJ,aAAa,CAACK,IAAd,CAAmBF,QAAnB,CAAL,EAAmC;AAClCC,IAAAA,WAAW,GAAG,KAAd;AACA;;AACD,SAAOA,WAAP;AACA,CAnBD;;AAqBAI,MAAM,CAACC,OAAP,GAAiB;AAChBX,EAAAA,UADgB;AAEhBE,EAAAA,aAFgB;AAGhBC,EAAAA,iBAHgB;AAIhBK,EAAAA;AAJgB,CAAjB","sourcesContent":["/**\n * Regular expression for email\n * @type {RegExp}\n * @default\n */\nconst regexEmail = new RegExp(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/);\n\n/**\n * Regular expression for password\n * @type {RegExp}\n * @default\n */\nconst regexPassword = new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!*^?+-_@#$%&]{8,}$/);\n\n/**\n * Validate the login form data. This is useful for reduce traffic to backend\n * @param  {string} email\n * @param  {string} password\n * @return {Boolean}                - True means data is valid\n */\nconst validateLoginForm = (email, password) => {\n\tlet dataIsValid = true;\n\n\tif (!email || !password) {\n\t\tdataIsValid = false;\n\t}\n\n\tif (!regexEmail.test(email)) {\n\t\tdataIsValid = false;\n\t}\n\n\tif (!regexPassword.test(password)) {\n\t\tdataIsValid = false;\n\t}\n\treturn dataIsValid;\n};\n\n/**\n * Validate the registration form data\n * @param  {string} email\n * @param  {string} password\n * @param  {string} repeatPassword\n * @return {Boolean}                - True means data is valid\n */\nconst validateRegisterForm = (email, password, repeatPassword) => {\n\tlet dataIsValid = true;\n\n\tif (!email || !password || !repeatPassword) {\n\t\tdataIsValid = false;\n\t}\n\n\tif (password !== repeatPassword) {\n\t\tdataIsValid = false;\n\t}\n\n\tif (!regexEmail.test(email)) {\n\t\tdataIsValid = false;\n\t}\n\n\tif (!regexPassword.test(password)) {\n\t\tdataIsValid = false;\n\t}\n\treturn dataIsValid;\n};\n\nmodule.exports = {\n\tregexEmail,\n\tregexPassword,\n\tvalidateLoginForm,\n\tvalidateRegisterForm\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mattd/Desktop/boilerplate-frontend-react-graphql-apollo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { StrictMode, useContext, Suspense, lazy, useEffect, useState } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { Spinner } from './components/Spinner';\nimport { useQuery, gql } from '@apollo/client';\nimport { map } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = /*#__PURE__*/lazy(_c = () => import('./pages/Home'));\n_c2 = Home;\nconst UserAdministration = /*#__PURE__*/lazy(_c3 = () => import('./pages/UserAdministration'));\n_c4 = UserAdministration;\nexport const App = () => {\n  _s();\n\n  const {\n    isAuth\n  } = useContext(AuthContext);\n  const {\n    userData\n  } = useContext(AuthContext);\n  const [tokens, setTokens] = useState([]);\n  const GET_DOGS = gql`\n\t{ \n\t\ttokens(orderBy: tradeVolume orderDirection:desc, first: 5){\n\t\t\tid\n\t\t\tname\n\t\t\tsymbol\n\t\t\ttradeVolume\n\t\t}\n\t}\t\n`;\n  const {\n    data,\n    loading\n  } = useQuery(GET_DOGS);\n  useEffect(() => {\n    if (!loading) {\n      setTokens(data.tokens);\n    }\n  }, [loading]);\n  useEffect(() => {\n    console.log(tokens);\n  }, [tokens]);\n\n  const renderList = () => map(tokens, token => /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [token.name, \" \", token.symbol]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 50\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? renderList() : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 2\n  }, this);\n};\n\n_s(App, \"uF9fNTokJ8GxtTjxBmaQGT+kIrY=\", false, function () {\n  return [useQuery];\n});\n\n_c5 = App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Home$lazy\");\n$RefreshReg$(_c2, \"Home\");\n$RefreshReg$(_c3, \"UserAdministration$lazy\");\n$RefreshReg$(_c4, \"UserAdministration\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["/Users/mattd/Desktop/boilerplate-frontend-react-graphql-apollo/src/App.js"],"names":["StrictMode","useContext","Suspense","lazy","useEffect","useState","AuthContext","Spinner","useQuery","gql","map","Home","UserAdministration","App","isAuth","userData","tokens","setTokens","GET_DOGS","data","loading","console","log","renderList","token","name","symbol"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,IAA3C,EAAiDC,SAAjD,EAA4DC,QAA5D,QAA4E,OAA5E;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,GAAT,QAAoB,QAApB;;AACA,MAAMC,IAAI,gBAAGR,IAAI,MAAC,MAAM,OAAO,cAAP,CAAP,CAAjB;MAAMQ,I;AACN,MAAMC,kBAAkB,gBAAGT,IAAI,OAAC,MAAM,OAAO,4BAAP,CAAP,CAA/B;MAAMS,kB;AAGN,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAab,UAAU,CAACK,WAAD,CAA7B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAed,UAAU,CAACK,WAAD,CAA/B;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMa,QAAQ,GAAGT,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATC;AAUA,QAAM;AAACU,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBZ,QAAQ,CAACU,QAAD,CAAhC;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACf,QAAG,CAACgB,OAAJ,EAAY;AACXH,MAAAA,SAAS,CAACE,IAAI,CAACH,MAAN,CAAT;AACA;AACD,GAJQ,EAIP,CAACI,OAAD,CAJO,CAAT;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACfiB,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,GAFQ,EAEP,CAACA,MAAD,CAFO,CAAT;;AAIA,QAAMO,UAAU,GAAG,MAAMb,GAAG,CAACM,MAAD,EAAUQ,KAAD,iBAAW;AAAA,eAAKA,KAAK,CAACC,IAAX,OAAkBD,KAAK,CAACE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,UAApB,CAA5B;;AACA,sBACA;AAAA,cAEE,CAACN,OAAD,GACGG,UAAU,EADb,gBAEG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAJL;AAAA;AAAA;AAAA;AAAA,UADA;AASA,CArCM;;GAAMV,G;UAeYL,Q;;;MAfZK,G","sourcesContent":["import { StrictMode, useContext, Suspense, lazy, useEffect, useState } from 'react';\n\nimport { AuthContext } from './AuthContext';\n\nimport { Spinner } from './components/Spinner';\nimport { useQuery, gql } from '@apollo/client';\nimport { map } from 'lodash'\nconst Home = lazy(() => import('./pages/Home'));\nconst UserAdministration = lazy(() => import('./pages/UserAdministration'));\n\n\nexport const App = () => {\n\tconst { isAuth } = useContext(AuthContext);\n\tconst { userData } = useContext(AuthContext);\n\tconst [tokens, setTokens] = useState([])\n\n\tconst GET_DOGS = gql`\n\t{ \n\t\ttokens(orderBy: tradeVolume orderDirection:desc, first: 5){\n\t\t\tid\n\t\t\tname\n\t\t\tsymbol\n\t\t\ttradeVolume\n\t\t}\n\t}\t\n`;\n\tconst {data, loading} = useQuery(GET_DOGS)\n\n\tuseEffect(() => {\n\t\tif(!loading){\n\t\t\tsetTokens(data.tokens)\n\t\t}\n\t},[loading])\n\n\tuseEffect(() => {\n\t\tconsole.log(tokens)\n\t},[tokens])\n\t\n\tconst renderList = () => map(tokens, (token) => <h1>{token.name} {token.symbol}</h1>)\n\treturn (\n\t<div>\n\t\t{\n\t\t\t!loading \n\t\t\t\t? renderList()\n\t\t\t\t: <Spinner/>\n\t\t}\n\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { StrictMode, useContext, Suspense, lazy, useEffect, useState } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { Spinner } from './components/Spinner';\nimport { useQuery, gql } from '@apollo/client';\nimport { map } from 'lodash';\nimport { List, ListItem, Checkbox, Avatar, ListItemButton, ListItemAvatar, ListItemText } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const {\n    isAuth\n  } = useContext(AuthContext);\n  const {\n    userData\n  } = useContext(AuthContext);\n  const [tokens, setTokens] = useState([]);\n  const GET_DOGS = gql`\n\t{ \n\t\ttokens(orderBy: tradeVolume orderDirection:desc, first: 5){\n\t\t\tid\n\t\t\tname\n\t\t\tsymbol\n\t\t\ttradeVolume\n\t\t}\n\t}\t\n`;\n  const {\n    data,\n    loading\n  } = useQuery(GET_DOGS);\n  useEffect(() => {\n    if (!loading) {\n      setTokens(data.tokens);\n    }\n  }, [loading]);\n  useEffect(() => {\n    console.log(tokens);\n  }, [tokens]);\n\n  const renderList = () => /*#__PURE__*/_jsxDEV(List, {\n    children: map(tokens, token => {\n      return /*#__PURE__*/_jsxDEV(ListItem, {\n        secondaryAction: /*#__PURE__*/_jsxDEV(Checkbox, {\n          edge: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 6\n        }, this),\n        disablePadding: true,\n        children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n          children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n            children: /*#__PURE__*/_jsxDEV(Avatar, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: token.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 4\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 27\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Top 5 Tokens by Trade Volume in USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }, this), renderList()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 2\n  }, this);\n};\n\n_s(App, \"uF9fNTokJ8GxtTjxBmaQGT+kIrY=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/App.js"],"names":["StrictMode","useContext","Suspense","lazy","useEffect","useState","AuthContext","Spinner","useQuery","gql","map","List","ListItem","Checkbox","Avatar","ListItemButton","ListItemAvatar","ListItemText","App","isAuth","userData","tokens","setTokens","GET_DOGS","data","loading","console","log","renderList","token","name"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,IAA3C,EAAiDC,SAAjD,EAA4DC,QAA5D,QAA4E,OAA5E;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,cAA3C,EAA2DC,cAA3D,EAA2EC,YAA3E,QAA+F,eAA/F;;AAGA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAalB,UAAU,CAACK,WAAD,CAA7B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAenB,UAAU,CAACK,WAAD,CAA/B;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMkB,QAAQ,GAAGd,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATC;AAUA,QAAM;AAACe,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBjB,QAAQ,CAACe,QAAD,CAAhC;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAG,CAACqB,OAAJ,EAAY;AACXH,MAAAA,SAAS,CAACE,IAAI,CAACH,MAAN,CAAT;AACA;AACD,GAJQ,EAIP,CAACI,OAAD,CAJO,CAAT;AAMArB,EAAAA,SAAS,CAAC,MAAM;AACfsB,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,GAFQ,EAEP,CAACA,MAAD,CAFO,CAAT;;AAIA,QAAMO,UAAU,GAAG,mBAAM,QAAC,IAAD;AAAA,cACxBlB,GAAG,CAACW,MAAD,EAAUQ,KAAD,IAAW;AACvB,0BACC,QAAC,QAAD;AACC,QAAA,eAAe,eACd,QAAC,QAAD;AACC,UAAA,IAAI,EAAC;AADN;AAAA;AAAA;AAAA;AAAA,gBAFF;AAMC,QAAA,cAAc,MANf;AAAA,+BAQC,QAAC,cAAD;AAAA,kCACC,QAAC,cAAD;AAAA,mCACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBADD,eAKC,QAAC,YAAD;AAAc,YAAA,OAAO,EAAEA,KAAK,CAACC;AAA7B;AAAA;AAAA;AAAA;AAAA,kBALD;AAAA;AAAA;AAAA;AAAA;AAAA;AARD;AAAA;AAAA;AAAA;AAAA,cADD;AAkBC,KAnBE;AADqB;AAAA;AAAA;AAAA;AAAA,UAAzB;;AAsBA,sBACA;AAAA,cAEE,CAACL,OAAD,gBACG;AAAA,8BACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,EAEAG,UAAU,EAFV;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,gBAKG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAPL;AAAA;AAAA;AAAA;AAAA,UADA;AAYA,CA7DM;;GAAMV,G;UAeYV,Q;;;KAfZU,G","sourcesContent":["import { StrictMode, useContext, Suspense, lazy, useEffect, useState } from 'react';\n\nimport { AuthContext } from './AuthContext';\n\nimport { Spinner } from './components/Spinner';\nimport { useQuery, gql } from '@apollo/client';\nimport { map } from 'lodash'\nimport { List, ListItem, Checkbox, Avatar, ListItemButton, ListItemAvatar, ListItemText } from '@mui/material';\n\n\nexport const App = () => {\n\tconst { isAuth } = useContext(AuthContext);\n\tconst { userData } = useContext(AuthContext);\n\tconst [tokens, setTokens] = useState([])\n\n\tconst GET_DOGS = gql`\n\t{ \n\t\ttokens(orderBy: tradeVolume orderDirection:desc, first: 5){\n\t\t\tid\n\t\t\tname\n\t\t\tsymbol\n\t\t\ttradeVolume\n\t\t}\n\t}\t\n`;\n\tconst {data, loading} = useQuery(GET_DOGS)\n\n\tuseEffect(() => {\n\t\tif(!loading){\n\t\t\tsetTokens(data.tokens)\n\t\t}\n\t},[loading])\n\n\tuseEffect(() => {\n\t\tconsole.log(tokens)\n\t},[tokens])\n\t\n\tconst renderList = () => <List>\n\t{map(tokens, (token) => {\n\t\treturn(\n\t\t\t<ListItem\n\t\t\t\tsecondaryAction={\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tedge=\"end\"\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\tdisablePadding\n\t\t\t>\n\t\t\t\t<ListItemButton>\n\t\t\t\t\t<ListItemAvatar>\n\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ListItemAvatar>\n\t\t\t\t\t<ListItemText primary={token.name} />\n\t\t\t\t</ListItemButton>\n\t\t\t</ListItem>\n\t\t\t)\n\t\t})}\n\t\t</List>\n\treturn (\n\t<div>\n\t\t{\n\t\t\t!loading \n\t\t\t\t? <div>\n\t\t\t\t\t<h1>Top 5 Tokens by Trade Volume in USD</h1>\n\t\t\t\t\t{renderList()}\n\t\t\t\t</div>\n\t\t\t\t: <Spinner/>\n\t\t}\n\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
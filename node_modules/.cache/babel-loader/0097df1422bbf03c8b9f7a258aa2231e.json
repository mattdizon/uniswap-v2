{"ast":null,"code":"/**\n * Save data in Session Storage\n * @param {string} name - key for data\n * @param {string} data - data to store\n */\nfunction saveSession(name, data) {\n  sessionStorage.setItem(name, data);\n}\n/**\n * Recover data from Session Storage\n * @param {string} name - key for data to recover\n */\n\n\nfunction recoverSession(name) {\n  return sessionStorage.getItem(name);\n}\n/**\n * Delete all data in Session Storage\n */\n\n\nfunction deleteSession() {\n  sessionStorage.clear();\n}\n/**\n * Serialize and save user data in Session Storage\n * @param {string|number|Array|Object} data - data to store\n */\n\n\nfunction storeUserDataOnSessionStorage(data) {\n  const replacer = (key, value) => {\n    if (typeof value === 'boolean' || typeof value === 'number') {\n      return String(value);\n    }\n\n    return value;\n  };\n\n  sessionStorage.setItem('userData', JSON.stringify(data, replacer));\n}\n/**\n * Recover and unserialize user data from Session Storage\n * @return {Object}\n */\n\n\nfunction recoverUserDataFromSessionStorage() {\n  const reviver = (key, value) => {\n    if (value === 'true') {\n      return true;\n    }\n\n    if (value === 'false') {\n      return false;\n    }\n\n    return value;\n  };\n\n  return JSON.parse(sessionStorage.getItem('userData'), reviver) || {};\n}\n/**\n * Delete user data in Session Storage\n */\n\n\nfunction deleteUserDataFromSessionStorage() {\n  sessionStorage.removeItem('userData');\n}\n\nmodule.exports = {\n  saveSession,\n  recoverSession,\n  deleteSession,\n  storeUserDataOnSessionStorage,\n  recoverUserDataFromSessionStorage,\n  deleteUserDataFromSessionStorage\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/utils/session.js"],"names":["saveSession","name","data","sessionStorage","setItem","recoverSession","getItem","deleteSession","clear","storeUserDataOnSessionStorage","replacer","key","value","String","JSON","stringify","recoverUserDataFromSessionStorage","reviver","parse","deleteUserDataFromSessionStorage","removeItem","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAChCC,EAAAA,cAAc,CAACC,OAAf,CAAuBH,IAAvB,EAA6BC,IAA7B;AACA;AAED;AACA;AACA;AACA;;;AACA,SAASG,cAAT,CAAwBJ,IAAxB,EAA8B;AAC7B,SAAOE,cAAc,CAACG,OAAf,CAAuBL,IAAvB,CAAP;AACA;AAED;AACA;AACA;;;AACA,SAASM,aAAT,GAAyB;AACxBJ,EAAAA,cAAc,CAACK,KAAf;AACA;AAED;AACA;AACA;AACA;;;AACA,SAASC,6BAAT,CAAuCP,IAAvC,EAA6C;AAC5C,QAAMQ,QAAQ,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChC,QAAI,OAAOA,KAAP,KAAiB,SAAjB,IAA8B,OAAOA,KAAP,KAAiB,QAAnD,EAA6D;AAC5D,aAAOC,MAAM,CAACD,KAAD,CAAb;AACA;;AACD,WAAOA,KAAP;AACA,GALD;;AAMAT,EAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCU,IAAI,CAACC,SAAL,CAAeb,IAAf,EAAqBQ,QAArB,CAAnC;AACA;AAED;AACA;AACA;AACA;;;AACA,SAASM,iCAAT,GAA6C;AAC5C,QAAMC,OAAO,GAAG,CAACN,GAAD,EAAMC,KAAN,KAAgB;AAC/B,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACrB,aAAO,IAAP;AACA;;AACD,QAAIA,KAAK,KAAK,OAAd,EAAuB;AACtB,aAAO,KAAP;AACA;;AACD,WAAOA,KAAP;AACA,GARD;;AASA,SAAOE,IAAI,CAACI,KAAL,CAAWf,cAAc,CAACG,OAAf,CAAuB,UAAvB,CAAX,EAA+CW,OAA/C,KAA2D,EAAlE;AACA;AAED;AACA;AACA;;;AACA,SAASE,gCAAT,GAA4C;AAC3ChB,EAAAA,cAAc,CAACiB,UAAf,CAA0B,UAA1B;AACA;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAChBtB,EAAAA,WADgB;AAEhBK,EAAAA,cAFgB;AAGhBE,EAAAA,aAHgB;AAIhBE,EAAAA,6BAJgB;AAKhBO,EAAAA,iCALgB;AAMhBG,EAAAA;AANgB,CAAjB","sourcesContent":["/**\n * Save data in Session Storage\n * @param {string} name - key for data\n * @param {string} data - data to store\n */\nfunction saveSession(name, data) {\n\tsessionStorage.setItem(name, data);\n}\n\n/**\n * Recover data from Session Storage\n * @param {string} name - key for data to recover\n */\nfunction recoverSession(name) {\n\treturn sessionStorage.getItem(name);\n}\n\n/**\n * Delete all data in Session Storage\n */\nfunction deleteSession() {\n\tsessionStorage.clear();\n}\n\n/**\n * Serialize and save user data in Session Storage\n * @param {string|number|Array|Object} data - data to store\n */\nfunction storeUserDataOnSessionStorage(data) {\n\tconst replacer = (key, value) => {\n\t\tif (typeof value === 'boolean' || typeof value === 'number') {\n\t\t\treturn String(value);\n\t\t}\n\t\treturn value;\n\t};\n\tsessionStorage.setItem('userData', JSON.stringify(data, replacer));\n}\n\n/**\n * Recover and unserialize user data from Session Storage\n * @return {Object}\n */\nfunction recoverUserDataFromSessionStorage() {\n\tconst reviver = (key, value) => {\n\t\tif (value === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\tif (value === 'false') {\n\t\t\treturn false;\n\t\t}\n\t\treturn value;\n\t};\n\treturn JSON.parse(sessionStorage.getItem('userData'), reviver) || {};\n}\n\n/**\n * Delete user data in Session Storage\n */\nfunction deleteUserDataFromSessionStorage() {\n\tsessionStorage.removeItem('userData');\n}\n\nmodule.exports = {\n\tsaveSession,\n\trecoverSession,\n\tdeleteSession,\n\tstoreUserDataOnSessionStorage,\n\trecoverUserDataFromSessionStorage,\n\tdeleteUserDataFromSessionStorage\n};"]},"metadata":{},"sourceType":"module"}
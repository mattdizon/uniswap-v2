{"ast":null,"code":"var _jsxFileName = \"/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Spinner } from './components/Spinner';\nimport { useQuery, gql } from '@apollo/client';\nimport { map } from 'lodash';\nimport { List, ListItem, Checkbox, Avatar, ListItemButton, ListItemAvatar, ListItemText } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const [tokens, setTokens] = useState([]);\n  const GET_DOGS = gql`\n\t{ \n\t\ttokens(orderBy: tradeVolume orderDirection:desc, first: 5){\n\t\t\tid\n\t\t\tname\n\t\t\tsymbol\n\t\t\ttradeVolume\n\t\t}\n\t}\t\n`;\n  const {\n    data,\n    loading\n  } = useQuery(GET_DOGS);\n  useEffect(() => {\n    if (!loading) {\n      setTokens(data.tokens);\n    }\n  }, [loading]);\n  useEffect(() => {\n    console.log(tokens);\n  }, [tokens]);\n\n  const renderList = () => /*#__PURE__*/_jsxDEV(List, {\n    sx: {\n      width: '15%'\n    },\n    children: map(tokens, token => {\n      return /*#__PURE__*/_jsxDEV(ListItem, {\n        secondaryAction: /*#__PURE__*/_jsxDEV(Checkbox, {\n          edge: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 6\n        }, this),\n        disablePadding: true,\n        children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n          children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              style: {\n                backgroundColor: 'gray'\n              },\n              children: token.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: token.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 4\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 27\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Top 5 Tokens by Trade Volume in USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 6\n      }, this), renderList()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 2\n  }, this);\n};\n\n_s(App, \"R58i9oyYCDYeV6gojOOlc2VxqHo=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/App.js"],"names":["useEffect","useState","Spinner","useQuery","gql","map","List","ListItem","Checkbox","Avatar","ListItemButton","ListItemAvatar","ListItemText","Box","App","tokens","setTokens","GET_DOGS","data","loading","console","log","renderList","width","token","backgroundColor","symbol","name"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,cAA3C,EAA2DC,cAA3D,EAA2EC,YAA3E,QAA+F,eAA/F;AACA,SAASC,GAAT,QAAoB,aAApB;;AAEA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMgB,QAAQ,GAAGb,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATC;AAUA,QAAM;AAACc,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBhB,QAAQ,CAACc,QAAD,CAAhC;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAG,CAACmB,OAAJ,EAAY;AACXH,MAAAA,SAAS,CAACE,IAAI,CAACH,MAAN,CAAT;AACA;AACD,GAJQ,EAIP,CAACI,OAAD,CAJO,CAAT;AAMAnB,EAAAA,SAAS,CAAC,MAAM;AACfoB,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,GAFQ,EAEP,CAACA,MAAD,CAFO,CAAT;;AAIA,QAAMO,UAAU,GAAG,mBAAM,QAAC,IAAD;AAAM,IAAA,EAAE,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAV;AAAA,cACxBlB,GAAG,CAACU,MAAD,EAAUS,KAAD,IAAW;AACvB,0BACC,QAAC,QAAD;AACC,QAAA,eAAe,eACd,QAAC,QAAD;AACC,UAAA,IAAI,EAAC;AADN;AAAA;AAAA;AAAA;AAAA,gBAFF;AAMC,QAAA,cAAc,MANf;AAAA,+BAQC,QAAC,cAAD;AAAA,kCACC,QAAC,cAAD;AAAA,mCACC,QAAC,GAAD;AAAK,cAAA,KAAK,EAAE;AAACC,gBAAAA,eAAe,EAAE;AAAlB,eAAZ;AAAA,wBACED,KAAK,CAACE;AADR;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBADD,eAMC,QAAC,YAAD;AAAc,YAAA,OAAO,EAAEF,KAAK,CAACG;AAA7B;AAAA;AAAA;AAAA;AAAA,kBAND;AAAA;AAAA;AAAA;AAAA;AAAA;AARD;AAAA;AAAA;AAAA;AAAA,cADD;AAmBC,KApBE;AADqB;AAAA;AAAA;AAAA;AAAA,UAAzB;;AAuBA,sBACA;AAAA,cAEE,CAACR,OAAD,gBACG;AAAA,8BACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,EAEAG,UAAU,EAFV;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,gBAKG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAPL;AAAA;AAAA;AAAA;AAAA,UADA;AAYA,CA5DM;;GAAMR,G;UAaYX,Q;;;KAbZW,G","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Spinner } from './components/Spinner';\nimport { useQuery, gql } from '@apollo/client';\nimport { map } from 'lodash'\nimport { List, ListItem, Checkbox, Avatar, ListItemButton, ListItemAvatar, ListItemText } from '@mui/material';\nimport { Box } from '@mui/system';\n\nexport const App = () => {\n\tconst [tokens, setTokens] = useState([])\n\n\tconst GET_DOGS = gql`\n\t{ \n\t\ttokens(orderBy: tradeVolume orderDirection:desc, first: 5){\n\t\t\tid\n\t\t\tname\n\t\t\tsymbol\n\t\t\ttradeVolume\n\t\t}\n\t}\t\n`;\n\tconst {data, loading} = useQuery(GET_DOGS)\n\n\tuseEffect(() => {\n\t\tif(!loading){\n\t\t\tsetTokens(data.tokens)\n\t\t}\n\t},[loading])\n\n\tuseEffect(() => {\n\t\tconsole.log(tokens)\n\t},[tokens])\n\t\n\tconst renderList = () => <List sx={{width: '15%'}}>\n\t{map(tokens, (token) => {\n\t\treturn(\n\t\t\t<ListItem\n\t\t\t\tsecondaryAction={\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tedge=\"end\"\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\tdisablePadding\n\t\t\t>\n\t\t\t\t<ListItemButton>\n\t\t\t\t\t<ListItemAvatar>\n\t\t\t\t\t\t<Box style={{backgroundColor: 'gray'}}>\n\t\t\t\t\t\t\t{token.symbol}\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</ListItemAvatar>\n\t\t\t\t\t<ListItemText primary={token.name} />\n\t\t\t\t</ListItemButton>\n\t\t\t</ListItem>\n\t\t\t)\n\t\t})}\n\t\t</List>\n\treturn (\n\t<div>\n\t\t{\n\t\t\t!loading \n\t\t\t\t? <div>\n\t\t\t\t\t<h1>Top 5 Tokens by Trade Volume in USD</h1>\n\t\t\t\t\t{renderList()}\n\t\t\t\t</div>\n\t\t\t\t: <Spinner/>\n\t\t}\n\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
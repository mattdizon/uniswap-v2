{"ast":null,"code":"var _jsxFileName = \"/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { saveSession, recoverSession, deleteSession, storeUserDataOnSessionStorage, recoverUserDataFromSessionStorage, deleteUserDataFromSessionStorage } from './utils/session';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\nconst Provider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isAuth, setIsAuth] = useState(() => {\n    return recoverSession('token');\n  });\n  const [userData, setUserData] = useState(() => {\n    return recoverUserDataFromSessionStorage();\n  });\n  const value = {\n    isAuth,\n    userData,\n    activateAuth: token => {\n      const decodedToken = jwt.decode(token) || {};\n      const userData = {\n        email: decodedToken.email,\n        isAdmin: decodedToken.isAdmin,\n        isActive: decodedToken.isActive,\n        uuid: decodedToken.uuid\n      };\n      storeUserDataOnSessionStorage(userData);\n      setUserData(userData);\n      saveSession('token', token);\n      setIsAuth(true);\n    },\n    removeAuth: () => {\n      setIsAuth(false);\n      setUserData({});\n      deleteUserDataFromSessionStorage();\n      deleteSession();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n}; // eslint-disable-next-line import/no-anonymous-default-export\n\n\n_s(Provider, \"nD1fcGGtpVYjo1nida65V4DAro4=\");\n\n_c = Provider;\nexport default {\n  Provider,\n  Consumer: AuthContext.Consumer\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/AuthContext.js"],"names":["createContext","useState","jwt","saveSession","recoverSession","deleteSession","storeUserDataOnSessionStorage","recoverUserDataFromSessionStorage","deleteUserDataFromSessionStorage","AuthContext","Provider","children","isAuth","setIsAuth","userData","setUserData","value","activateAuth","token","decodedToken","decode","email","isAdmin","isActive","uuid","removeAuth","Consumer"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,aAAtC,EAAqDC,6BAArD,EAAoFC,iCAApF,EAAuHC,gCAAvH,QAA+J,iBAA/J;;AAEA,OAAO,MAAMC,WAAW,gBAAGT,aAAa,EAAjC;;AAEP,MAAMU,QAAQ,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,MAAM;AAC1C,WAAOG,cAAc,CAAC,OAAD,CAArB;AACA,GAFmC,CAApC;AAIA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,MAAM;AAC9C,WAAOM,iCAAiC,EAAxC;AACA,GAFuC,CAAxC;AAIA,QAAMS,KAAK,GAAG;AACbJ,IAAAA,MADa;AAEbE,IAAAA,QAFa;AAGbG,IAAAA,YAAY,EAAGC,KAAD,IAAW;AACxB,YAAMC,YAAY,GAAGjB,GAAG,CAACkB,MAAJ,CAAWF,KAAX,KAAqB,EAA1C;AACA,YAAMJ,QAAQ,GAAG;AAChBO,QAAAA,KAAK,EAAEF,YAAY,CAACE,KADJ;AAEhBC,QAAAA,OAAO,EAAEH,YAAY,CAACG,OAFN;AAGhBC,QAAAA,QAAQ,EAAEJ,YAAY,CAACI,QAHP;AAIhBC,QAAAA,IAAI,EAAEL,YAAY,CAACK;AAJH,OAAjB;AAMAlB,MAAAA,6BAA6B,CAACQ,QAAD,CAA7B;AACAC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAX,MAAAA,WAAW,CAAC,OAAD,EAAUe,KAAV,CAAX;AACAL,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA,KAfY;AAgBbY,IAAAA,UAAU,EAAE,MAAM;AACjBZ,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAP,MAAAA,gCAAgC;AAChCH,MAAAA,aAAa;AACb;AArBY,GAAd;AAwBA,sBACC,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEW,KAA7B;AAAA,cACEL;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAtCD,C,CAwCA;;;GAxCMD,Q;;KAAAA,Q;AAyCN,eAAe;AAAEA,EAAAA,QAAF;AAAYgB,EAAAA,QAAQ,EAAEjB,WAAW,CAACiB;AAAlC,CAAf","sourcesContent":["import { createContext, useState } from 'react';\n\nimport jwt from 'jsonwebtoken';\n\nimport { saveSession, recoverSession, deleteSession, storeUserDataOnSessionStorage, recoverUserDataFromSessionStorage, deleteUserDataFromSessionStorage } from './utils/session';\n\nexport const AuthContext = createContext();\n\nconst Provider = ({ children }) => {\n\tconst [isAuth, setIsAuth] = useState(() => {\n\t\treturn recoverSession('token');\n\t});\n\n\tconst [userData, setUserData] = useState(() => {\n\t\treturn recoverUserDataFromSessionStorage();\n\t});\n\n\tconst value = {\n\t\tisAuth,\n\t\tuserData,\n\t\tactivateAuth: (token) => {\n\t\t\tconst decodedToken = jwt.decode(token) || {};\n\t\t\tconst userData = {\n\t\t\t\temail: decodedToken.email,\n\t\t\t\tisAdmin: decodedToken.isAdmin,\n\t\t\t\tisActive: decodedToken.isActive,\n\t\t\t\tuuid: decodedToken.uuid\n\t\t\t};\n\t\t\tstoreUserDataOnSessionStorage(userData);\n\t\t\tsetUserData(userData);\n\t\t\tsaveSession('token', token);\n\t\t\tsetIsAuth(true);\n\t\t},\n\t\tremoveAuth: () => {\n\t\t\tsetIsAuth(false);\n\t\t\tsetUserData({});\n\t\t\tdeleteUserDataFromSessionStorage();\n\t\t\tdeleteSession();\n\t\t}\n\t};\n\n\treturn (\n\t\t<AuthContext.Provider value={value}>\n\t\t\t{children}\n\t\t</AuthContext.Provider>\n\t);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { Provider, Consumer: AuthContext.Consumer };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink, ApolloLink } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { recoverSession, deleteSession } from '../utils/session';\nconst httpLink = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\"\n});\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  const token = recoverSession('token');\n  const authorization = token ? `Bearer ${token}` : '';\n  operation.setContext(_ref => {\n    let {\n      headers = {}\n    } = _ref;\n    return {\n      headers: { ...headers,\n        authorization: authorization\n      }\n    };\n  });\n  return forward(operation);\n});\nconst errorLink = onError(_ref2 => {\n  let {\n    operation,\n    graphQLErrors,\n    networkError,\n    response\n  } = _ref2;\n\n  if (graphQLErrors) {\n    graphQLErrors.forEach(err => {\n      // err.message, err.locations, err.path, err.extensions\n      if (err.extensions.code === 'UNAUTHENTICATED' || err.extensions.code === 'FORBIDDEN') {\n        deleteSession();\n        window.location.href = '/';\n      }\n\n      if (err.extensions.code === 'INTERNAL_SERVER_ERROR') {\n        err.message = 'An error has occurred';\n      }\n    });\n  }\n\n  if (networkError && networkError.response === 'invalid_token') {\n    deleteSession();\n    window.location.href = '/';\n  }\n});\nconst link = ApolloLink.from([httpLink]);\nconst apolloClient = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\nexport default apolloClient;","map":{"version":3,"sources":["/Users/mattdizon/Desktop/boilerplate-frontend-react-graphql-apollo/src/apollo/config.js"],"names":["ApolloClient","InMemoryCache","HttpLink","ApolloLink","onError","recoverSession","deleteSession","httpLink","uri","authMiddleware","operation","forward","token","authorization","setContext","headers","errorLink","graphQLErrors","networkError","response","forEach","err","extensions","code","window","location","href","message","link","from","apolloClient","cache"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,EAAgDC,UAAhD,QAAkE,gBAAlE;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,kBAA9C;AAEA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC7BM,EAAAA,GAAG,EAAE;AADwB,CAAb,CAAjB;AAIA,MAAMC,cAAc,GAAG,IAAIN,UAAJ,CAAe,CAACO,SAAD,EAAYC,OAAZ,KAAwB;AAC7D,QAAMC,KAAK,GAAGP,cAAc,CAAC,OAAD,CAA5B;AACA,QAAMQ,aAAa,GAAGD,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAAlD;AACAF,EAAAA,SAAS,CAACI,UAAV,CAAqB;AAAA,QAAC;AAAEC,MAAAA,OAAO,GAAG;AAAZ,KAAD;AAAA,WAAuB;AAC3CA,MAAAA,OAAO,EAAE,EACR,GAAGA,OADK;AAERF,QAAAA,aAAa,EAAEA;AAFP;AADkC,KAAvB;AAAA,GAArB;AAOA,SAAOF,OAAO,CAACD,SAAD,CAAd;AACA,CAXsB,CAAvB;AAaA,MAAMM,SAAS,GAAGZ,OAAO,CAAC,SAA0D;AAAA,MAAzD;AAAEM,IAAAA,SAAF;AAAaO,IAAAA,aAAb;AAA4BC,IAAAA,YAA5B;AAA0CC,IAAAA;AAA1C,GAAyD;;AACnF,MAAIF,aAAJ,EAAmB;AAClBA,IAAAA,aAAa,CAACG,OAAd,CAAsBC,GAAG,IAAI;AAC5B;AACA,UAAIA,GAAG,CAACC,UAAJ,CAAeC,IAAf,KAAwB,iBAAxB,IAA6CF,GAAG,CAACC,UAAJ,CAAeC,IAAf,KAAwB,WAAzE,EAAsF;AACrFjB,QAAAA,aAAa;AACbkB,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACA;;AAED,UAAIL,GAAG,CAACC,UAAJ,CAAeC,IAAf,KAAwB,uBAA5B,EAAqD;AACpDF,QAAAA,GAAG,CAACM,OAAJ,GAAc,uBAAd;AACA;AACD,KAVD;AAWA;;AAED,MAAIT,YAAY,IAAIA,YAAY,CAACC,QAAb,KAA0B,eAA9C,EAA+D;AAC9Db,IAAAA,aAAa;AACbkB,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACA;AACD,CAnBwB,CAAzB;AAqBA,MAAME,IAAI,GAAGzB,UAAU,CAAC0B,IAAX,CAAgB,CAACtB,QAAD,CAAhB,CAAb;AAGA,MAAMuB,YAAY,GAAG,IAAI9B,YAAJ,CAAiB;AACrC4B,EAAAA,IADqC;AAErCG,EAAAA,KAAK,EAAE,IAAI9B,aAAJ;AAF8B,CAAjB,CAArB;AAKA,eAAe6B,YAAf","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink, ApolloLink } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { recoverSession, deleteSession } from '../utils/session';\n\nconst httpLink = new HttpLink({\n\turi: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\"\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n\tconst token = recoverSession('token');\n\tconst authorization = token ? `Bearer ${token}` : '';\n\toperation.setContext(({ headers = {} }) => ({\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: authorization,\n\t\t},\n\t}));\n  \n\treturn forward(operation);\n});\n\nconst errorLink = onError(({ operation, graphQLErrors, networkError, response }) => {\n\tif (graphQLErrors) {\n\t\tgraphQLErrors.forEach(err => {\n\t\t\t// err.message, err.locations, err.path, err.extensions\n\t\t\tif (err.extensions.code === 'UNAUTHENTICATED' || err.extensions.code === 'FORBIDDEN') {\n\t\t\t\tdeleteSession();\n\t\t\t\twindow.location.href = '/';\n\t\t\t}\n\n\t\t\tif (err.extensions.code === 'INTERNAL_SERVER_ERROR') {\n\t\t\t\terr.message = 'An error has occurred';\n\t\t\t}\n\t\t});\n\t}\n\n\tif (networkError && networkError.response === 'invalid_token') {\n\t\tdeleteSession();\n\t\twindow.location.href = '/';\n\t}\n});\n\nconst link = ApolloLink.from([httpLink]);\n\n\nconst apolloClient = new ApolloClient({\n\tlink,\n\tcache: new InMemoryCache()\n});\n\nexport default apolloClient;\n"]},"metadata":{},"sourceType":"module"}